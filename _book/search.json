[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2023 Advent of Code",
    "section": "",
    "text": "Preface\nThis is the Quarto version of this ObservableHQ collection.\nMade with help from my Quartize browser extension.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "day-01.html#part-1",
    "href": "day-01.html#part-1",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?`\n\nExample Input Validation 1\n\nawait note(\n  `A basic solution to this part is to split each string into characters and only look at the first and last actual digit (which will work for instances like \\`trebu7chet\\`).`\n)\n\n\n\n\n\n\n\nsample1 = `1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet`;\n\njsInputValidation1 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = d.split(\"\").filter((d) =&gt; d.match(/\\d/));\n      return +`${digits[0]}${digits.at(-1)}`;\n    })\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    chars &lt;- strsplit(.s, '')[[1]]\n    chars &lt;- chars[grepl(r\"(\\\\d)\", chars)]\n    as.integer(sprintf(\"%s%s\", chars[1], chars[length(chars)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 == jsInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = d.split(\"\").filter((d) =&gt; d.match(/\\d/));\n      return +`${digits[0]}${digits.at(-1)}`;\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    chars &lt;- strsplit(.s, '')[[1]]\n    chars &lt;- chars[grepl(r\"(\\\\d)\", chars)]\n    as.integer(sprintf(\"%s%s\", chars[1], chars[length(chars)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-01.html#part-2",
    "href": "day-01.html#part-2",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\nYour calculation isn‚Äôt quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid ‚Äúdigits‚Äù.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\ntwo1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\n\nawait note(`As usual, the instructions are not completely helpful, and an initial naive solution failed to take into account that they mean for you to take each spelled out digit as you work from first to last character in each string. It's still a pretty simple solution.`)\n\n\n\n\n\n\n\nJS Helpers\n\nnumberMap = ({\n  one: \"1\",\n  two: \"2\",\n  three: \"3\",\n  four: \"4\",\n  five: \"5\",\n  six: \"6\",\n  seven: \"7\",\n  eight: \"8\",\n  nine: \"9\"\n})\n\n\n\n\n\n\n\nfunction parseDigits(str) {\n  let d = [];\n  while (str.length &gt; 0) {\n    d.push(str.match(/^(\\d|one|two|three|four|five|six|seven|eight|nine)/));\n    str = str.slice(1);\n  }\n  return d.filter((d) =&gt; d).map((d) =&gt; numberMap[d[0]] || d[0]);\n}\n\n\n\n\n\n\n\n\nWebR Helpers\n\nawait note(\n  \"WebR helper functions can be found in the WebR initialization code block.\"\n)\n\n\n\n\n\n\n\n\nExample Input Validation 2\n\nsample2 = `two1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen`\n\njsInputValidation2 = d3.sum(\n  sample2\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = parseDigits(d);\n      return +`${digits[0][0]}${digits.at(-1)[0]}`;\n    })\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample2})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    digits &lt;- parse_digits(.s)\n    as.integer(sprintf(\"%s%s\", digits[1], digits[length(digits)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 == jsInputValidation2\n\n\n\n\n\n\n\n\nPuzzle Input Question 2`\n\njsPuzzleInput2 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = parseDigits(d);\n      return +`${digits[0][0]}${digits.at(-1)[0]}`;\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    digits &lt;- parse_digits(.s)\n    as.integer(sprintf(\"%s%s\", digits[1], digits[length(digits)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-01.html#puzzle-input",
    "href": "day-01.html#puzzle-input",
    "title": "Day 1: Trebuchet?!",
    "section": "Puzzle Input",
    "text": "Puzzle Input\n\npuzzleInput = FileAttachment(\"/static/data/01-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages([\"stringi\"], true);\n  await intWebR.evalRVoid(`library(stringi)`);\n\n  await intWebR.evalRVoid(`\nsetNames(\n  c(1:9, 1:9),\n  c(\n    \"one\", \"two\", \"three\", \"four\", \"five\", \n    \"six\", \"seven\", \"eight\", \"nine\", 1:9)\n) -&gt; number_map\n\nnumber_regex &lt;- sprintf(\"^(%s)\", paste0(names(number_map), collapse=\"|\"))\n\nparse_digits &lt;- function (str) {\n  out &lt;- c()\n  while (nchar(str) &gt; 0) {\n    match &lt;- stri_match_first_regex(str, number_regex)[1]\n    out &lt;- c(out, match)\n    str &lt;- substring(str, 2);\n  }\n  unname(number_map[as.character(na.omit(out))])\n}`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nasync function note(msg) {\n  return html`&lt;style&gt;\n  .container {\n  display: flex;\n  align-items: flex-start;\n  width: 500px;\n}\n\n.icon {\n  display: flex;\n  align-items: center;\n  width: 32px;\n  margin-right: 6px;\n}\n\n.text {\n  font-family: monaspace, sans-serif;\n  font-size: 0.9em;\n  display: flex;\n  align-items: center;\n  width: calc(100% - 32px);\n  min-height: 32px;\n  color: #1E792C;\n}\n&lt;/style&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"icon\"&gt;\n    ${await FileAttachment(\"/static/christmas-ball-fill.svg\").image()}\n  &lt;/div&gt;\n  &lt;div class=\"text\"&gt;\n    ${msg}\n  &lt;/div&gt;\n&lt;/div&gt;`;\n}\n\n\n\n\n\n\nChristmas ball/ornament icon from:https://icon-sets.iconify.design/mingcute/christmas-ball-fill/`\n\nstyle",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-02.html#part-1",
    "href": "day-02.html#part-1",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 1",
    "text": "Part 1\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\n\nExample Input Validation 1\n\nsample1 = `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`\n\njsInputValidation1 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .filter((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) &lt;= 12 &&\n        d3.max(g.draws.map((c) =&gt; c.green)) &lt;= 13 &&\n        d3.max(g.draws.map((c) =&gt; c.blue)) &lt;= 14\n      );\n    })\n    .map((g) =&gt; g.game)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    max_red = max(red, na.rm = TRUE),\n    max_green = max(green, na.rm = TRUE),\n    max_blue = max(blue, na.rm = TRUE)\n  ) |&gt;  \n  dplyr::filter(\n    max_red &lt;= 12 & max_green &lt;= 13 & max_blue &lt;= 14\n  ) |&gt; \n  dplyr::pull(game) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\njsInputValidation1 == rInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .filter((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) &lt;= 12 &&\n        d3.max(g.draws.map((c) =&gt; c.green)) &lt;= 13 &&\n        d3.max(g.draws.map((c) =&gt; c.blue)) &lt;= 14\n      );\n    })\n    .map((g) =&gt; g.game)\n)\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    max_red = max(red, na.rm = TRUE),\n    max_green = max(green, na.rm = TRUE),\n    max_blue = max(blue, na.rm = TRUE)\n  ) |&gt;  \n  dplyr::filter(\n    max_red &lt;= 12 & max_green &lt;= 13 & max_blue &lt;= 14\n  ) |&gt; \n  dplyr::pull(game) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 2: Cube Conundrum"
    ]
  },
  {
    "objectID": "day-02.html#part-2",
    "href": "day-02.html#part-2",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 2",
    "text": "Part 2\nThe Elf says they‚Äôve stopped producing snow because they aren‚Äôt getting any water! He isn‚Äôt sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It‚Äôs just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\nIn game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.\nGame 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.\nGame 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.\nGame 4 required at least 14 red, 3 green, and 15 blue cubes.\nGame 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.\n\nThe power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?\n\njsInputValidation2 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .map((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) *\n        d3.max(g.draws.map((c) =&gt; c.green)) *\n        d3.max(g.draws.map((c) =&gt; c.blue))\n      );\n    })\n)\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    power = max(red, na.rm = TRUE) * \n      max(green, na.rm = TRUE) *\n      max(blue, na.rm = TRUE)\n  ) |&gt; \n  dplyr::pull(power) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\njsInputValidation2 == rInputValidation2\n\n\n\n\n\n\n\njsPuzzleInput2 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .map((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) *\n        d3.max(g.draws.map((c) =&gt; c.green)) *\n        d3.max(g.draws.map((c) =&gt; c.blue))\n      );\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    power = max(red, na.rm = TRUE) * \n      max(green, na.rm = TRUE) *\n      max(blue, na.rm = TRUE)\n  ) |&gt; \n  dplyr::pull(power) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2\n\n\n\n\n\n\n\npuzzleInput = FileAttachment(\"/static/data/02-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages([\"stringi\", \"dplyr\"], true);\n  await intWebR.evalRVoid(`suppressPackageStartupMessages({\nlibrary(stringi)\nlibrary(dplyr)\n})`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { note } from \"@hrbrmstr/2023-day-1-trebuchet\"\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nstyle",
    "crumbs": [
      "Day 2: Cube Conundrum"
    ]
  },
  {
    "objectID": "day-03.html#part-1",
    "href": "day-03.html#part-1",
    "title": "Day 3: Gear Ratios",
    "section": "Part 1",
    "text": "Part 1\nYou and the Elf eventually reach a gondola lift station; he says the gondola lift will take you up to the water source, but this is as far as he can bring you. You go inside.\nIt doesn‚Äôt take long to find the gondolas, but there seems to be a problem: they‚Äôre not moving.\n‚ÄúAaah!‚Äù\nYou turn around to see a slightly-greasy Elf with a wrench and a look of surprise. ‚ÄúSorry, I wasn‚Äôt expecting anyone! The gondola lift isn‚Äôt working right now; it‚Äôll still be a while before I can fix it.‚Äù You offer to help.\nThe engineer explains that an engine part seems to be missing from the engine, but nobody can figure out which one. If you can add up all the part numbers in the engine schematic, it should be easy to work out which part is missing.\nThe engine schematic (your puzzle input) consists of a visual representation of the engine. There are lots of numbers and symbols you don‚Äôt really understand, but apparently any number adjacent to a symbol, even diagonally, is a ‚Äúpart number‚Äù and should be included in your sum. (Periods (.) do not count as a symbol.)\nHere is an example engine schematic:\n467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..\nIn this schematic, two numbers are not part numbers because they are not adjacent to a symbol: 114 (top right) and 58 (middle right). Every other number is adjacent to a symbol and so is a part number; their sum is 4361.\nOf course, the actual engine schematic is much larger. What is the sum of all of the part numbers in the engine schematic?\n\nExample Input Validation 1\n\nawait note(\n  \"I broke out what's happening in the code block that solves the puzzle so folks could see the approach better. I really hate these grid search puzzles.\"\n)\n\n\n\n\n\n\n\nsample1 = `467..114..\n...*......\n..35..633.\n......#...\n617*......\n.....+.58.\n..592.....\n......755.\n...$.*....\n.664.598..`\n\ngrid = sample1.split(\"\\n\").filter((d) =&gt; d != \"\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngrid\n\n\n\n\n\n\n\nawait note(\"First we find where all the numbers are and save the value, Y position, and start/end X.\")\n\n\n\n\n\n\n\nnumberLocations = grid\n  .map((l) =&gt; l.matchAll(/(\\d+)/g))\n  .map((d, i) =&gt;\n    Array.from(d).map((m) =&gt; {\n      m.y = i;\n      return m;\n    })\n  )\n  .flat()\n  .map((d) =&gt; ({\n    value: +d[0],\n    start: d.index,\n    end: d[0].length + d.index - 1,\n    y: d.y\n  }))\n\n\n\n\n\n\n\nnumberLocations\n\n\n\n\n\n\n\nawait note(\"We then find where all the symbols are.\")\n\n\n\n\n\n\n\nsymbolLocations = grid\n  .map((l) =&gt; l.matchAll(/([^\\d\\.])/g))\n  .map((d, i) =&gt;\n    Array.from(d).map((m) =&gt; {\n      m.y = i;\n      return m;\n    })\n  )\n  .flat()\n  .map((d) =&gt; ({\n    value: d[0],\n    start: d.index,\n    end: d[0].length + d.index - 1,\n    y: d.y\n  }))\n\n\n\n\n\n\n\nsymbolLocations\n\n\n\n\n\n\n\nawait note(\"This makes the grid search super fast and easy to grok.\")\n\n\n\n\n\n\n\nfoundNumbers = [\n  ...new Set(\n    symbolLocations\n      .map((s) =&gt; {\n        return numberLocations.filter((n) =&gt; {\n          return (\n            s.start &gt;= n.start - 1 &&\n            s.end &lt;= n.end + 1 &&\n            s.y &gt;= n.y - 1 &&\n            s.y &lt;= n.y + 1\n          );\n        });\n      })\n      .flat()\n  )\n]\n\n\n\n\n\n\n\nfoundNumbers\n\n\n\n\n\n\n\njsInputValidation1 = {\n  const grid = sample1.split(\"\\n\").filter((d) =&gt; d != \"\");\n  const numberLocations = grid\n    .map((l) =&gt; l.matchAll(/(\\d+)/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: +d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  const symbolLocations = grid\n    .map((l) =&gt; l.matchAll(/([^\\d\\.])/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  return d3.sum(\n    [\n      ...new Set(\n        symbolLocations\n          .map((s) =&gt; {\n            return numberLocations.filter((n) =&gt; {\n              return (\n                s.start &gt;= n.start - 1 &&\n                s.end &lt;= n.end + 1 &&\n                s.y &gt;= n.y - 1 &&\n                s.y &lt;= n.y + 1\n              );\n            });\n          })\n          .flat()\n      )\n    ].map((d) =&gt; d.value)\n  );\n}\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nawait note(\"The R bits use portions of the {tidyverse} and {rematch2}.\")\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() -&gt; grid\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([[:digit:]]+)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      rename(               # makes it easier to do the comparison below\n        nmatch = match,\n        nstart = start,\n        nend = end\n      ) |&gt; \n      mutate(\n        ny = .idx\n      )\n  }) -&gt; number_matches\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([^\\\\\\\\.[:digit:]]+)\") |&gt; # having to double escape these is a annoying\n        pull(\\`.match\\`)\n    ) |&gt; \n      mutate(\n        y = .idx\n      )\n  }) -&gt; symbol_matches\n\nsymbol_matches |&gt; \n  rowwise() |&gt; \n  mutate(\n    found_numbers = list(\n      number_matches |&gt; \n        filter(\n          start &gt;= nstart - 1 & \n            end &lt;= nend + 1 & \n            y &gt;= ny - 1 & \n            y &lt;= ny + 1\n        )\n    )\n  ) |&gt;  \n  unnest(found_numbers) |&gt; \n  distinct(nmatch, nstart, nend, ny) |&gt; \n  pull(nmatch) |&gt; \n  as.integer() |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\njsInputValidation1 == rInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = {\n  const grid = puzzleInput.split(\"\\n\").filter((d) =&gt; d != \"\");\n  const numberLocations = grid\n    .map((l) =&gt; l.matchAll(/(\\d+)/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: +d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  const symbolLocations = grid\n    .map((l) =&gt; l.matchAll(/([^\\d\\.])/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  return d3.sum(\n    [\n      ...new Set(\n        symbolLocations\n          .map((s) =&gt; {\n            return numberLocations.filter((n) =&gt; {\n              return (\n                s.start &gt;= n.start - 1 &&\n                s.end &lt;= n.end + 1 &&\n                s.y &gt;= n.y - 1 &&\n                s.y &lt;= n.y + 1\n              );\n            });\n          })\n          .flat()\n      )\n    ].map((d) =&gt; d.value)\n  );\n}\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() -&gt; grid\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([[:digit:]]+)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      rename(               # makes it easier to do the comparison below\n        nmatch = match,\n        nstart = start,\n        nend = end\n      ) |&gt; \n      mutate(\n        ny = .idx\n      )\n  }) -&gt; number_matches\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([^\\\\\\\\.[:digit:]]+)\") |&gt; # having to double escape these is a annoying\n        pull(\\`.match\\`)\n    ) |&gt; \n      mutate(\n        y = .idx\n      )\n  }) -&gt; symbol_matches\n\nsymbol_matches |&gt; \n  rowwise() |&gt; \n  mutate(\n    found_numbers = list(\n      number_matches |&gt; \n        filter(\n          start &gt;= nstart - 1 & \n            end &lt;= nend + 1 & \n            y &gt;= ny - 1 & \n            y &lt;= ny + 1\n        )\n    )\n  ) |&gt;  \n  unnest(found_numbers) |&gt; \n  distinct(nmatch, nstart, nend, ny) |&gt; \n  pull(nmatch) |&gt; \n  as.integer() |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 3: Gear Ratios"
    ]
  },
  {
    "objectID": "day-03.html#part-2",
    "href": "day-03.html#part-2",
    "title": "Day 3: Gear Ratios",
    "section": "Part 2",
    "text": "Part 2\nThe engineer finds the missing part and installs it in the engine! As the engine springs to life, you jump in the closest gondola, finally ready to ascend to the water source.\nYou don‚Äôt seem to be going very fast, though. Maybe something is still wrong? Fortunately, the gondola has a phone labeled ‚Äúhelp‚Äù, so you pick it up and the engineer answers.\nBefore you can explain the situation, she suggests that you look out the window. There stands the engineer, holding a phone in one hand and waving with the other. You‚Äôre going so slowly that you haven‚Äôt even left the station. You exit the gondola.\nThe missing part wasn‚Äôt the only issue - one of the gears in the engine is wrong. A gear is any * symbol that is adjacent to exactly two part numbers. Its gear ratio is the result of multiplying those two numbers together.\nThis time, you need to find the gear ratio of every gear and add them all up so that the engineer can figure out which gear needs to be replaced.\nIn the original schematic, there are two gears. The first is in the top left; it has part numbers 467 and 35, so its gear ratio is 16345. The second gear is in the lower right; its gear ratio is 451490. (The * adjacent to 617 is not a gear because it is only adjacent to one part number.) Adding up all of the gear ratios produces 467835.\nWhat is the sum of all of the gear ratios in your engine schematic?\n\nawait note(\n  \"This is the same idiom except we only care about `*` symbols that have 2 numbers associated with them. \"\n)\n\n\n\n\n\n\n\ngearSymbolLocations = grid\n  .map((l) =&gt; l.matchAll(/([\\*])/g))\n  .map((d, i) =&gt;\n    Array.from(d).map((m) =&gt; {\n      m.y = i;\n      return m;\n    })\n  )\n  .flat()\n  .map((d) =&gt; ({\n    value: d[0],\n    start: d.index,\n    end: d[0].length + d.index - 1,\n    y: d.y\n  }))\n\n\n\n\n\n\n\ngearSymbolLocations\n\n\n\n\n\n\n\njsInputValidation2 = d3.sum(\n  symbolLocations\n    .map((s) =&gt; {\n      return numberLocations.filter((n) =&gt; {\n        return (\n          s.start &gt;= n.start - 1 &&\n          s.end &lt;= n.end + 1 &&\n          s.y &gt;= n.y - 1 &&\n          s.y &lt;= n.y + 1\n        );\n      });\n    })\n    .filter((d) =&gt; d.length == 2)\n    .map((d) =&gt; d[0].value * d[1].value)\n)\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() -&gt; grid\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([[:digit:]]+)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      rename(               # makes it easier to do the comparison below\n        nmatch = match,\n        nstart = start,\n        nend = end\n      ) |&gt; \n      mutate(\n        ny = .idx\n      )\n  }) -&gt; number_matches\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"(\\\\\\\\*)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      mutate(\n        y = .idx\n      )\n  }) -&gt; gear_matches\n\ngear_matches |&gt; \n  rowwise() |&gt; \n  mutate(\n    found_numbers = list(\n      number_matches |&gt; \n        filter(\n          start &gt;= nstart - 1 & \n            end &lt;= nend + 1 & \n            y &gt;= ny - 1 & \n            y &lt;= ny + 1\n        )\n    )\n  ) |&gt; \n  ungroup() |&gt; \n  filter(\n    map_lgl(found_numbers, \\\\(.x) nrow(.x) == 2)\n  ) |&gt; \n  mutate(\n    ratio = map_dbl(found_numbers, \\\\(.x) {\n      as.integer(.x$nmatch[1]) * as.integer(.x$nmatch[2])\n    })\n  ) |&gt; \n  pull(ratio) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\njsInputValidation2 == rInputValidation2\n\n\n\n\n\n\n\njsPuzzleInput2 = {\n  const grid = puzzleInput.split(\"\\n\").filter((d) =&gt; d != \"\");\n\n  const numberLocations = grid\n    .map((l) =&gt; l.matchAll(/(\\d+)/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: +d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  const gearSymbolLocations = grid\n    .map((l) =&gt; l.matchAll(/([\\*])/g))\n    .map((d, i) =&gt;\n      Array.from(d).map((m) =&gt; {\n        m.y = i;\n        return m;\n      })\n    )\n    .flat()\n    .map((d) =&gt; ({\n      value: d[0],\n      start: d.index,\n      end: d[0].length + d.index - 1,\n      y: d.y\n    }));\n\n  return d3.sum(\n    gearSymbolLocations\n      .map((s) =&gt; {\n        return numberLocations.filter((n) =&gt; {\n          return (\n            s.start &gt;= n.start - 1 &&\n            s.end &lt;= n.end + 1 &&\n            s.y &gt;= n.y - 1 &&\n            s.y &lt;= n.y + 1\n          );\n        });\n      })\n      .filter((d) =&gt; d.length == 2)\n      .map((d) =&gt; d[0].value * d[1].value)\n  );\n}\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() -&gt; grid\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"([[:digit:]]+)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      rename(               # makes it easier to do the comparison below\n        nmatch = match,\n        nstart = start,\n        nend = end\n      ) |&gt; \n      mutate(\n        ny = .idx\n      )\n  }) -&gt; number_matches\n\ngrid |&gt; \n  imap_dfr(\\\\(.line, .idx) {\n    as.data.frame(\n      re_exec_all(.line, \"(\\\\\\\\*)\") |&gt; \n        pull(\\`.match\\`)\n    ) |&gt; \n      mutate(\n        y = .idx\n      )\n  }) -&gt; gear_matches\n\ngear_matches |&gt; \n  rowwise() |&gt; \n  mutate(\n    found_numbers = list(\n      number_matches |&gt; \n        filter(\n          start &gt;= nstart - 1 & \n            end &lt;= nend + 1 & \n            y &gt;= ny - 1 & \n            y &lt;= ny + 1\n        )\n    )\n  ) |&gt; \n  ungroup() |&gt; \n  filter(\n    map_lgl(found_numbers, \\\\(.x) nrow(.x) == 2)\n  ) |&gt; \n  mutate(\n    ratio = map_dbl(found_numbers, \\\\(.x) {\n      as.integer(.x$nmatch[1]) * as.integer(.x$nmatch[2])\n    })\n  ) |&gt; \n  pull(ratio) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2\n\n\n\n\n\n\n\npuzzleInput = FileAttachment(\"/static/data/03-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages(\n    [\"stringi\", \"dplyr\", \"purrr\", \"rematch2\", \"tidyr\"],\n    true\n  );\n  await intWebR.evalRVoid(`suppressPackageStartupMessages({\nlibrary(stringi)\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(tidyr)\nlibrary(rematch2)\n})`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { note } from \"@hrbrmstr/2023-day-1-trebuchet\"\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nstyle",
    "crumbs": [
      "Day 3: Gear Ratios"
    ]
  },
  {
    "objectID": "day-04.html#part-1",
    "href": "day-04.html#part-1",
    "title": "Day 4: Scratchcards",
    "section": "Part 1",
    "text": "Part 1\nThe gondola takes you up. Strangely, though, the ground doesn‚Äôt seem to be coming with you; you‚Äôre not climbing a mountain. As the circle of Snow Island recedes below you, an entire new landmass suddenly appears above you! The gondola carries you to the surface of the new island and lurches into the station.\nAs you exit the gondola, the first thing you notice is that the air here is much warmer than it was on Snow Island. It‚Äôs also quite humid. Is this where the water source is?\nThe next thing you notice is an Elf sitting on the floor across the station in what seems to be a pile of colorful square cards.\n‚ÄúOh! Hello!‚Äù The Elf excitedly runs over to you. ‚ÄúHow may I be of service?‚Äù You ask about water sources.\n‚ÄúI‚Äôm not sure; I just operate the gondola lift. That does sound like something we‚Äôd have, though - this is Island Island, after all! I bet the gardener would know. He‚Äôs on a different island, though - er, the small kind surrounded by water, not the floating kind. We really need to come up with a better naming scheme. Tell you what: if you can help me with something quick, I‚Äôll let you borrow my boat and you can go visit the gardener. I got all these scratchcards as a gift, but I can‚Äôt figure out what I‚Äôve won.‚Äù\nThe Elf leads you over to the pile of colorful cards. There, you discover dozens of scratchcards, all with their opaque covering already scratched off. Picking one up, it looks like each card has two lists of numbers separated by a vertical bar (|): a list of winning numbers and then a list of numbers you have. You organize the information into a table (your puzzle input).\nAs far as the Elf has been able to figure out, you have to figure out which of the numbers you have appear in the list of winning numbers. The first match makes the card worth one point and each match after the first doubles the point value of that card.\nFor example:\nCard 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\nIn the above example, card 1 has five winning numbers (41, 48, 83, 86, and 17) and eight numbers you have (83, 86, 6, 31, 17, 9, 48, and 53). Of the numbers you have, four of them (48, 83, 17, and 86) are winning numbers! That means card 1 is worth 8 points (1 for the first match, then doubled three times for each of the three matches after the first).\n\nCard 2 has two winning numbers (32 and 61), so it is worth 2 points.\nCard 3 has two winning numbers (1 and 21), so it is worth 2 points.\nCard 4 has one winning number (84), so it is worth 1 point.\nCard 5 has no winning numbers, so it is worth no points.\nCard 6 has no winning numbers, so it is worth no points.\nSo, in this example, the Elf‚Äôs pile of scratchcards is worth 13 points.\n\nTake a seat in the large pile of colorful cards. How many points are they worth in total?\n\nExample Input Validation 1\n\nsample1 = `Card 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11`\n\njsInputValidation1 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [card, winning] = d\n        .split(/: +/)[1]\n        .split(\" | \")\n        .map((d) =&gt; d.split(/ +/).map((d) =&gt; +d));\n      return Math.floor(\n        Math.pow(\n          2,\n          card.filter((number) =&gt; winning.includes(number)).length - 1\n        )\n      );\n    })\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt;\n  stri_split_regex(\"(: | \\\\\\\\| )\", simplify = TRUE) |&gt; \n  _[,2:3] |&gt; \n  apply(1, \\\\(.row) {\n    floor(2 ^ (\n      do.call(\n        intersect,\n        lapply(.row, \\\\(.col) {\n          stri_trim(.col) |&gt; \n            stri_split_regex(\" +\", simplify = TRUE) |&gt; \n            unlist()\n        })) |&gt; \n        length() -1)\n    )\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\njsInputValidation1 == rInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      let [card, winning] = d\n        .split(/: +/)[1]\n        .split(\" | \")\n        .map((d) =&gt; d.split(/ +/).map((d) =&gt; +d));\n      return Math.floor(\n        Math.pow(\n          2,\n          card.filter((number) =&gt; winning.includes(number)).length - 1\n        )\n      );\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt;\n  stri_split_regex(\"(: | \\\\\\\\| )\", simplify = TRUE) |&gt; \n    _[,2:3] |&gt; \n    apply(1, \\\\(.row) {\n      floor(2 ^ (\n        do.call(\n          intersect,\n          lapply(.row, \\\\(.col) {\n            stri_trim(.col) |&gt; \n              stri_split_regex(\" +\", simplify = TRUE) |&gt; \n              unlist()\n          })) |&gt; \n          length() -1)\n      )\n    }) |&gt; \n    sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 4: Scratchcards"
    ]
  },
  {
    "objectID": "day-04.html#part-2",
    "href": "day-04.html#part-2",
    "title": "Day 4: Scratchcards",
    "section": "Part 2",
    "text": "Part 2\nJust as you‚Äôre about to report your findings to the Elf, one of you realizes that the rules have actually been printed on the back of every card this whole time.\nThere‚Äôs no such thing as ‚Äúpoints‚Äù. Instead, scratchcards only cause you to win more scratchcards equal to the number of winning numbers you have.\nSpecifically, you win copies of the scratchcards below the winning card equal to the number of matches. So, if card 10 were to have 5 matching numbers, you would win one copy each of cards 11, 12, 13, 14, and 15.\nCopies of scratchcards are scored like normal scratchcards and have the same card number as the card they copied. So, if you win a copy of card 10 and it has 5 matching numbers, it would then win a copy of the same cards that the original card 10 won: cards 11, 12, 13, 14, and 15. This process repeats until none of the copies cause you to win any more cards. (Cards will never make you copy a card past the end of the table.)\nThis time, the above example goes differently:\nCard 1: 41 48 83 86 17 | 83 86  6 31 17  9 48 53\nCard 2: 13 32 20 16 61 | 61 30 68 82 17 32 24 19\nCard 3:  1 21 53 59 44 | 69 82 63 72 16 21 14  1\nCard 4: 41 92 73 84 69 | 59 84 76 51 58  5 54 83\nCard 5: 87 83 26 28 32 | 88 30 70 12 93 22 82 36\nCard 6: 31 18 13 56 72 | 74 77 10 23 35 67 36 11\n\nCard 1 has four matching numbers, so you win one copy each of the next four cards: cards 2, 3, 4, and 5.\nYour original card 2 has two matching numbers, so you win one copy each of cards 3 and 4.\nYour copy of card 2 also wins one copy each of cards 3 and 4.\nYour four instances of card 3 (one original and three copies) have two matching numbers, so you win four copies each of cards 4 and 5.\nYour eight instances of card 4 (one original and seven copies) have one matching number, so you win eight copies of card 5.\nYour fourteen instances of card 5 (one original and thirteen copies) have no matching numbers and win no more cards.\nYour one instance of card 6 (one original) has no matching numbers and wins no more cards.\n\nOnce all of the originals and copies have been processed, you end up with 1 instance of card 1, 2 instances of card 2, 4 instances of card 3, 8 instances of card 4, 14 instances of card 5, and 1 instance of card 6. In total, this example pile of scratchcards causes you to ultimately have 30 scratchcards!\nProcess all of the original and copied scratchcards until no more scratchcards are won. Including the original set of scratchcards, how many total scratchcards do you end up with?\n\nawait note(\n  \"The in-place object modification inside a functional context (in the JS solution) is almost as horrible as my base R solution code is ugly.\"\n)\n\n\n\n\n\n\n\njsInputValidation2 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [card, winning] = d\n        .split(/: +/)[1]\n        .split(\" | \")\n        .map((d) =&gt; d.split(/ +/).map((d) =&gt; +d));\n      return {\n        wins: card.filter((number) =&gt; winning.includes(number)).length,\n        ct: 1 // our counter for the # of times we get copies of this card including this orig card\n      };\n    })\n    .map(({ wins, ct }, idx, cards) =&gt; {\n      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#using_the_third_argument_of_callbackfn\n      // in-place object modification like this is so potentially dangerous but it's also pretty convenient\n      cards.slice(idx + 1, idx + 1 + wins).forEach((card) =&gt; (card.ct += ct));\n      return ct;\n    })\n)\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nawait note(\n  \"These 'for loop' R solutions always seem so hackneyed. Also, this is some of the most unreadable R code I have ever written.\"\n)\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt;\n  stri_split_regex(\"(: | \\\\\\\\| )\", simplify = TRUE) |&gt; \n  _[,2:3] |&gt; \n  apply(1, \\\\(.row) {\n    do.call(\n      intersect,\n      lapply(.row, \\\\(.col) {\n        stri_trim(.col) |&gt; \n          stri_split_regex(\" +\", simplify = TRUE) |&gt; \n          unlist()\n      })) |&gt; \n      length()\n  }) -&gt; wins\n\ncards &lt;- rep(1, length(wins))\n\nfor (i in 1:(length(cards)-1)) {\n  \n  if (wins[i] == 0) next\n  \n  from &lt;- i + 1\n  to &lt;- min(i + wins[i], length(wins))\n  \n  cards[from:to] &lt;- cards[from:to] + cards[i]\n  \n}\n\nsum(cards)\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\njsInputValidation2 == rInputValidation2\n\n\n\n\n\n\n\njsPuzzleInput2 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [card, winning] = d\n        .split(/: +/)[1]\n        .split(\" | \")\n        .map((d) =&gt; d.split(/ +/).map((d) =&gt; +d));\n      return {\n        wins: card.filter((number) =&gt; winning.includes(number)).length,\n        ct: 1 \n      };\n    })\n    .map(({ wins, ct }, idx, cards) =&gt; {\n      cards.slice(idx + 1, idx + 1 + wins).forEach((card) =&gt; (card.ct += ct));\n      return ct;\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt;\n  stri_split_regex(\"(: | \\\\\\\\| )\", simplify = TRUE) |&gt; \n  _[,2:3] |&gt; \n  apply(1, \\\\(.row) {\n    do.call(\n      intersect,\n      lapply(.row, \\\\(.col) {\n        stri_trim(.col) |&gt; \n          stri_split_regex(\" +\", simplify = TRUE) |&gt; \n          unlist()\n      })) |&gt; \n      length()\n  }) -&gt; wins\n\ncards &lt;- rep(1, length(wins))\n\nfor (i in 1:(length(cards)-1)) {\n  \n  if (wins[i] == 0) next\n  \n  from &lt;- i + 1\n  to &lt;- min(i + wins[i], length(wins))\n  \n  cards[from:to] &lt;- cards[from:to] + cards[i]\n  \n}\n\nsum(cards)\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2\n\n\n\n\n\n\n\npuzzleInput = FileAttachment(\"/static/data/04-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages([\"stringi\"], true);\n  await intWebR.evalRVoid(`suppressPackageStartupMessages({\nlibrary(stringi)\n})`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { note } from \"@hrbrmstr/2023-day-1-trebuchet\"\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nstyle",
    "crumbs": [
      "Day 4: Scratchcards"
    ]
  }
]