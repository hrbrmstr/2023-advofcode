[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "2023 Advent of Code",
    "section": "",
    "text": "Preface\nThis is the Quarto version of this ObservableHQ collection.\nMade with help from my Quartize browser extension.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "day-01.html#part-1",
    "href": "day-01.html#part-1",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 1",
    "text": "Part 1\nThe newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.\nFor example:\n1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet\nIn this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.\nConsider your entire calibration document. What is the sum of all of the calibration values?`\n\nExample Input Validation 1\n\nawait note(\n  `A basic solution to this part is to split each string into characters and only look at the first and last actual digit (which will work for instances like \\`trebu7chet\\`).`\n)\n\n\n\n\n\n\n\nsample1 = `1abc2\npqr3stu8vwx\na1b2c3d4e5f\ntreb7uchet`;\n\njsInputValidation1 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = d.split(\"\").filter((d) =&gt; d.match(/\\d/));\n      return +`${digits[0]}${digits.at(-1)}`;\n    })\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    chars &lt;- strsplit(.s, '')[[1]]\n    chars &lt;- chars[grepl(r\"(\\\\d)\", chars)]\n    as.integer(sprintf(\"%s%s\", chars[1], chars[length(chars)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 == jsInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = d.split(\"\").filter((d) =&gt; d.match(/\\d/));\n      return +`${digits[0]}${digits.at(-1)}`;\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    chars &lt;- strsplit(.s, '')[[1]]\n    chars &lt;- chars[grepl(r\"(\\\\d)\", chars)]\n    as.integer(sprintf(\"%s%s\", chars[1], chars[length(chars)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-01.html#part-2",
    "href": "day-01.html#part-2",
    "title": "Day 1: Trebuchet?!",
    "section": "Part 2",
    "text": "Part 2\nYour calculation isn‚Äôt quite right. It looks like some of the digits are actually spelled out with letters: one, two, three, four, five, six, seven, eight, and nine also count as valid ‚Äúdigits‚Äù.\nEquipped with this new information, you now need to find the real first and last digit on each line. For example:\ntwo1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen\nIn this example, the calibration values are 29, 83, 13, 24, 42, 14, and 76. Adding these together produces 281.\nWhat is the sum of all of the calibration values?\n\nawait note(`As usual, the instructions are not completely helpful, and an initial naive solution failed to take into account that they mean for you to take each spelled out digit as you work from first to last character in each string. It's still a pretty simple solution.`)\n\n\n\n\n\n\n\nJS Helpers\n\nnumberMap = ({\n  one: \"1\",\n  two: \"2\",\n  three: \"3\",\n  four: \"4\",\n  five: \"5\",\n  six: \"6\",\n  seven: \"7\",\n  eight: \"8\",\n  nine: \"9\"\n})\n\n\n\n\n\n\n\nfunction parseDigits(str) {\n  let d = [];\n  while (str.length &gt; 0) {\n    d.push(str.match(/^(\\d|one|two|three|four|five|six|seven|eight|nine)/));\n    str = str.slice(1);\n  }\n  return d.filter((d) =&gt; d).map((d) =&gt; numberMap[d[0]] || d[0]);\n}\n\n\n\n\n\n\n\n\nWebR Helpers\n\nawait note(\n  \"WebR helper functions can be found in the WebR initialization code block.\"\n)\n\n\n\n\n\n\n\n\nExample Input Validation 2\n\nsample2 = `two1nine\neightwothree\nabcone2threexyz\nxtwone3four\n4nineeightseven2\nzoneight234\n7pqrstsixteen`\n\njsInputValidation2 = d3.sum(\n  sample2\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = parseDigits(d);\n      return +`${digits[0][0]}${digits.at(-1)[0]}`;\n    })\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample2})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    digits &lt;- parse_digits(.s)\n    as.integer(sprintf(\"%s%s\", digits[1], digits[length(digits)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 == jsInputValidation2\n\n\n\n\n\n\n\n\nPuzzle Input Question 2`\n\njsPuzzleInput2 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const digits = parseDigits(d);\n      return +`${digits[0][0]}${digits.at(-1)[0]}`;\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt;\n  stri_split_lines1() |&gt; \n  sapply(\\\\(.s) {\n    digits &lt;- parse_digits(.s)\n    as.integer(sprintf(\"%s%s\", digits[1], digits[length(digits)]))\n  }) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-01.html#puzzle-input",
    "href": "day-01.html#puzzle-input",
    "title": "Day 1: Trebuchet?!",
    "section": "Puzzle Input",
    "text": "Puzzle Input\n\npuzzleInput = FileAttachment(\"/static/data/01-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages([\"stringi\"], true);\n  await intWebR.evalRVoid(`library(stringi)`);\n\n  await intWebR.evalRVoid(`\nsetNames(\n  c(1:9, 1:9),\n  c(\n    \"one\", \"two\", \"three\", \"four\", \"five\", \n    \"six\", \"seven\", \"eight\", \"nine\", 1:9)\n) -&gt; number_map\n\nnumber_regex &lt;- sprintf(\"^(%s)\", paste0(names(number_map), collapse=\"|\"))\n\nparse_digits &lt;- function (str) {\n  out &lt;- c()\n  while (nchar(str) &gt; 0) {\n    match &lt;- stri_match_first_regex(str, number_regex)[1]\n    out &lt;- c(out, match)\n    str &lt;- substring(str, 2);\n  }\n  unname(number_map[as.character(na.omit(out))])\n}`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nasync function note(msg) {\n  return html`&lt;style&gt;\n  .container {\n  display: flex;\n  align-items: flex-start;\n  width: 500px;\n}\n\n.icon {\n  display: flex;\n  align-items: center;\n  width: 32px;\n  margin-right: 6px;\n}\n\n.text {\n  font-family: monaspace, sans-serif;\n  font-size: 0.9em;\n  display: flex;\n  align-items: center;\n  width: calc(100% - 32px);\n  min-height: 32px;\n  color: #1E792C;\n}\n&lt;/style&gt;\n&lt;div class=\"container\"&gt;\n  &lt;div class=\"icon\"&gt;\n    ${await FileAttachment(\"/static/christmas-ball-fill.svg\").image()}\n  &lt;/div&gt;\n  &lt;div class=\"text\"&gt;\n    ${msg}\n  &lt;/div&gt;\n&lt;/div&gt;`;\n}\n\n\n\n\n\n\nChristmas ball/ornament icon from:https://icon-sets.iconify.design/mingcute/christmas-ball-fill/`\n\nstyle",
    "crumbs": [
      "Day 1: Trebuchet?!"
    ]
  },
  {
    "objectID": "day-02.html#part-1",
    "href": "day-02.html#part-1",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 1",
    "text": "Part 1\nAs you walk, the Elf shows you a small bag and some cubes which are either red, green, or blue. Each time you play this game, he will hide a secret number of cubes of each color in the bag, and your goal is to figure out information about the number of cubes.\nTo get information, once a bag has been loaded with cubes, the Elf will reach into the bag, grab a handful of random cubes, show them to you, and then put them back in the bag. He‚Äôll do this a few times per game.\nYou play several games and record the information from each game (your puzzle input). Each game is listed with its ID number (like the 11 in Game 11: ‚Ä¶) followed by a semicolon-separated list of subsets of cubes that were revealed from the bag (like 3 red, 5 green, 4 blue).\nFor example, the record of a few games might look like this:\nGame 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green\nIn game 1, three sets of cubes are revealed from the bag (and then put back again). The first set is 3 blue cubes and 4 red cubes; the second set is 1 red cube, 2 green cubes, and 6 blue cubes; the third set is only 2 green cubes.\nThe Elf would first like to know which games would have been possible if the bag contained only 12 red cubes, 13 green cubes, and 14 blue cubes?\nIn the example above, games 1, 2, and 5 would have been possible if the bag had been loaded with that configuration. However, game 3 would have been impossible because at one point the Elf showed you 20 red cubes at once; similarly, game 4 would also have been impossible because the Elf showed you 15 blue cubes at once. If you add up the IDs of the games that would have been possible, you get 8.\nDetermine which games would have been possible if the bag had been loaded with only 12 red cubes, 13 green cubes, and 14 blue cubes. What is the sum of the IDs of those games?\n\nExample Input Validation 1\n\nsample1 = `Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green\nGame 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue\nGame 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red\nGame 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red\nGame 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green`\n\njsInputValidation1 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .filter((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) &lt;= 12 &&\n        d3.max(g.draws.map((c) =&gt; c.green)) &lt;= 13 &&\n        d3.max(g.draws.map((c) =&gt; c.blue)) &lt;= 14\n      );\n    })\n    .map((g) =&gt; g.game)\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\njsInputValidation1\n\n\n\n\n\n\n\nrInputValidation1 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    max_red = max(red, na.rm = TRUE),\n    max_green = max(green, na.rm = TRUE),\n    max_blue = max(blue, na.rm = TRUE)\n  ) |&gt;  \n  dplyr::filter(\n    max_red &lt;= 12 & max_green &lt;= 13 & max_blue &lt;= 14\n  ) |&gt; \n  dplyr::pull(game) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation1\n\n\n\n\n\n\n\njsInputValidation1 == rInputValidation1\n\n\n\n\n\n\n\n\nPuzzle Input Question 1\n\njsPuzzleInput1 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .filter((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) &lt;= 12 &&\n        d3.max(g.draws.map((c) =&gt; c.green)) &lt;= 13 &&\n        d3.max(g.draws.map((c) =&gt; c.blue)) &lt;= 14\n      );\n    })\n    .map((g) =&gt; g.game)\n)\n\n\n\n\n\n\n\njsPuzzleInput1\n\n\n\n\n\n\n\nrPuzzleInput1 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    max_red = max(red, na.rm = TRUE),\n    max_green = max(green, na.rm = TRUE),\n    max_blue = max(blue, na.rm = TRUE)\n  ) |&gt;  \n  dplyr::filter(\n    max_red &lt;= 12 & max_green &lt;= 13 & max_blue &lt;= 14\n  ) |&gt; \n  dplyr::pull(game) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput1\n\n\n\n\n\n\n\njsPuzzleInput1 == rPuzzleInput1",
    "crumbs": [
      "Day 2: Cube Conundrum"
    ]
  },
  {
    "objectID": "day-02.html#part-2",
    "href": "day-02.html#part-2",
    "title": "Day 2: Cube Conundrum",
    "section": "Part 2",
    "text": "Part 2\nThe Elf says they‚Äôve stopped producing snow because they aren‚Äôt getting any water! He isn‚Äôt sure why the water stopped; however, he can show you how to get to the water source to check it out for yourself. It‚Äôs just up ahead!\nAs you continue your walk, the Elf poses a second question: in each game you played, what is the fewest number of cubes of each color that could have been in the bag to make the game possible?\n\nIn game 1, the game could have been played with as few as 4 red, 2 green, and 6 blue cubes. If any color had even one fewer cube, the game would have been impossible.\nGame 2 could have been played with a minimum of 1 red, 3 green, and 4 blue cubes.\nGame 3 must have been played with at least 20 red, 13 green, and 6 blue cubes.\nGame 4 required at least 14 red, 3 green, and 15 blue cubes.\nGame 5 needed no fewer than 6 red, 3 green, and 2 blue cubes in the bag.\n\nThe power of a set of cubes is equal to the numbers of red, green, and blue cubes multiplied together. The power of the minimum set of cubes in game 1 is 48. In games 2-5 it was 12, 1560, 630, and 36, respectively. Adding up these five powers produces the sum 2286.\nFor each game, find the minimum set of cubes that must have been present. What is the sum of the power of these sets?\n\njsInputValidation2 = d3.sum(\n  sample1\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .map((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) *\n        d3.max(g.draws.map((c) =&gt; c.green)) *\n        d3.max(g.draws.map((c) =&gt; c.blue))\n      );\n    })\n)\n\n\n\n\n\n\n\njsInputValidation2\n\n\n\n\n\n\n\nrInputValidation2 = await webR.evalRNumber(`\nr\"(${sample1})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    power = max(red, na.rm = TRUE) * \n      max(green, na.rm = TRUE) *\n      max(blue, na.rm = TRUE)\n  ) |&gt; \n  dplyr::pull(power) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrInputValidation2\n\n\n\n\n\n\n\njsInputValidation2 == rInputValidation2\n\n\n\n\n\n\n\njsPuzzleInput2 = d3.sum(\n  puzzleInput\n    .split(\"\\n\")\n    .filter((d) =&gt; d != \"\")\n    .map((d) =&gt; {\n      const [game, draws] = d.split(\": \");\n      return {\n        game: +game.replace(/[^\\d]/g, \"\"),\n        draws: draws.split(\"; \").map((draw) =&gt; {\n          return draw\n            .split(\", \")\n            .map((cubes) =&gt; {\n              const [count, color] = cubes.split(\" \");\n              return [color, +count];\n            })\n            .reduce((obj, [key, value]) =&gt; {\n              obj[key] = value;\n              return obj;\n            }, {});\n        })\n      };\n    })\n    .map((g) =&gt; {\n      return (\n        d3.max(g.draws.map((c) =&gt; c.red)) *\n        d3.max(g.draws.map((c) =&gt; c.green)) *\n        d3.max(g.draws.map((c) =&gt; c.blue))\n      );\n    })\n)\n\n\n\n\n\n\n\njsPuzzleInput2\n\n\n\n\n\n\n\nrPuzzleInput2 = await webR.evalRNumber(`\nr\"(${puzzleInput})\" |&gt; \n  stri_split_lines1() |&gt; \n  lapply(\\\\(.game) {\n    game_draw &lt;- stri_split_fixed(.game, \": \")[[1]]\n    game &lt;- gsub(\"[^0-9]\", \"\", game_draw[1])\n    stri_match_all_regex(\n      stri_split_fixed(game_draw[2], \"; \")[[1]],\n      \"([0-9]+) ([a-z]+)\"\n    ) |&gt; \n      lapply(\\\\(.draw) {\n        setNames(as.integer(.draw[,2]), .draw[,3]) |&gt; \n          as.list() |&gt; \n          as.data.frame() |&gt; \n          cbind.data.frame(data.frame(game = as.integer(game)))\n      }) |&gt; \n      dplyr::bind_rows()\n  }) |&gt; \n  dplyr::bind_rows() |&gt; \n  dplyr::select(game, red, green, blue) |&gt; \n  dplyr::group_by(game) |&gt; \n  dplyr::summarise(\n    power = max(red, na.rm = TRUE) * \n      max(green, na.rm = TRUE) *\n      max(blue, na.rm = TRUE)\n  ) |&gt; \n  dplyr::pull(power) |&gt; \n  sum()\n`)\n\n\n\n\n\n\n\nrPuzzleInput2\n\n\n\n\n\n\n\njsPuzzleInput2 == rPuzzleInput2\n\n\n\n\n\n\n\npuzzleInput = FileAttachment(\"/static/data/02-01.txt\").text()\n\n\n\n\n\n\n\nwebR = {\n  const { WebR, ChannelType } = await import(\n    \"https://cdn.jsdelivr.net/npm/webr/dist/webr.mjs\"\n  );\n\n  const intWebR = new WebR({\n    channelType: ChannelType.PostMessage,\n    interactive: false\n  });\n\n  await intWebR.init();\n\n  await intWebR.installPackages([\"stringi\", \"dplyr\"], true);\n  await intWebR.evalRVoid(`suppressPackageStartupMessages({\nlibrary(stringi)\nlibrary(dplyr)\n})`);\n\n  document.querySelector(\"#loader\").innerText = \"üü¢\";\n  document.querySelector(\"#msg\").innerText = \"WebR loaded!\";\n\n  return intWebR;\n}\n\n\n\n\n\n\n\nimport { note } from \"@hrbrmstr/2023-day-1-trebuchet\"\n\n\n\n\n\n\n\nimport { style } from \"@hrbrmstr/hrbrthemes\"\n\n\n\n\n\n\n\nstyle",
    "crumbs": [
      "Day 2: Cube Conundrum"
    ]
  }
]